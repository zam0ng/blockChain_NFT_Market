%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 843
%%HiResBoundingBox: 0 0 2391.1199 842.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 842.88 re
W
q
[0.24 0 0 -0.24 0 842.88] cm
q
0 0 9962.5 3512.5 re
W*
q
[3.12549 0 0 3.125 0 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3187.5 1125 re
f
Q
q
[32.557194 0 0 32.552086 130.228775 130.208344] cm
/DeviceRGB {} CS
[0.2745 0.8039 0.8118] SC
/DeviceRGB {} cs
[0.2745 0.8039 0.8118] sc
95 52 m
95 39.128998 89.307999 27.569 80.318001 19.681999 c
72.431 10.692 60.870998 5 48 5 c
24.290001 5 5 24.290001 5 48 c
5 60.868 10.690001 72.426003 19.677 80.313004 c
27.563999 89.306 39.125999 95 52 95 c
52.084 95 52.166 94.994003 52.25 94.994003 c
52.334 94.994003 52.416 95 52.5 95 c
75.972 95 95 75.972 95 52.5 c
95 52.416 94.994003 52.334 94.994003 52.25 c
94.994003 52.166 95 52.084 95 52 c
h
21.827999 73.371002 m
17.583 67.393005 15.057999 60.112003 15.005999 52.25 c
15.140999 31.739 31.737999 15.140999 52.25 15.006001 c
60.112 15.058001 67.393997 17.583 73.371002 21.828001 c
80.223999 28.473 84.5 37.757999 84.5 48 c
84.5 68.125999 68.125999 84.5 48 84.5 c
37.757999 84.5 28.473 80.223999 21.827999 73.371002 c
h
6 48 m
6 24.841 24.841 6 48 6 c
57.858002 6 66.926003 9.422 74.099998 15.13 c
67.637001 11.242 60.076 9 52 9 c
28.290001 9 9 28.290001 9 52 c
9 60.074001 11.241 67.633003 15.127 74.095001 c
9.421 66.922997 6 57.855999 6 48 c
h
52 89 m
41.919998 89 32.773003 84.945 26.094999 78.385002 c
32.269001 82.853996 39.838001 85.5 48 85.5 c
68.678001 85.5 85.5 68.678001 85.5 48 c
85.5 39.838001 82.854004 32.269001 78.385002 26.094999 c
84.945 32.772999 89 41.919998 89 52 c
89 72.402 72.402 89 52 89 c
h
f
Q
q
[70.096275 0 0 70.085281 3868.0615 839.5343] cm
/DeviceRGB {} CS
[0.2745 0.8039 0.8118] SC
/DeviceRGB {} cs
[0.2745 0.8039 0.8118] sc
0.83008 5.996 m
3.58398 5.996 l
3.58398 7.3437 3.81836 8.4895 4.28711 9.4335 c
4.79492 10.6574 5.13997 11.6308 5.32231 12.3534 c
5.32231 12.372932 l
5.351607 12.372932 l
5.585987 11.513552 6.071007 10.182232 6.806707 8.378832 c
6.995507 7.519452 7.089907 6.725232 7.089907 5.996032 c
9.677807 5.996032 l
9.521557 7.402332 9.326247 8.437431 9.091867 9.101532 c
7.539167 12.636732 l
6.591897 12.636732 l
6.591897 15.058632 l
5.156396 15.058632 l
5.156396 15.527382 l
6.591897 15.527382 l
6.591897 20.000082 l
3.916096 20.000082 l
3.883548 20.000082 3.867269 19.983803 3.867269 19.951254 c
3.867269 17.763754 l
3.447349 17.763754 l
3.447349 13.886754 l
4.238369 13.886754 l
4.238369 13.525424 l
3.369228 13.525424 l
3.297617 13.440785 2.757258 12.226623 1.748128 9.882824 c
1.324958 8.945324 1.113359 8.378923 1.113359 8.183624 c
2.265658 8.183624 l
2.265658 7.695344 l
1.015658 7.695344 l
0.891958 6.660144 0.830108 6.093744 0.830108 5.996144 c
0.83008 5.996 l
h
-0.83985 7.695 m
1.01565 7.695 l
1.093775 8.18328 l
-0.839825 8.18328 l
-0.839825 7.695 l
-0.83985 7.695 l
h
6.709 12.7246 m
7.13869 12.7246 l
7.13869 12.822256 l
6.87502 13.154286 l
7.13869 13.154286 l
7.13869 13.222646 l
7.13869 13.255195 7.122411 13.271474 7.089862 13.271474 c
6.738302 13.271474 l
6.705753 13.271474 6.689474 13.255195 6.689474 13.222646 c
6.689474 13.173818 l
6.953144 12.851547 l
6.709003 12.851547 l
6.709003 12.724597 l
6.709 12.7246 l
h
6.5918 15.0586 m
7.7441 15.0586 l
7.7441 15.52735 l
6.5918 15.52735 l
6.5918 15.0586 l
h
15.537116 6.025 m
17.542316 6.025 18.860617 6.72488 19.492216 8.1246 c
19.850296 8.80819 20.029325 10.1266 20.029325 12.079701 c
20.029325 12.14806 l
18.994125 12.14806 l
18.994125 12.61681 l
20.029325 12.61681 l
20.029325 17.665609 l
19.345736 17.665609 l
19.345736 19.48201 l
17.988335 19.48201 l
17.988335 19.99959 l
13.242235 19.99959 l
13.242235 19.48201 l
12.666065 19.48201 l
12.666065 17.665609 l
11.445365 17.665609 l
11.445365 16.239809 l
12.168025 16.239809 l
12.168025 15.487859 l
11.445365 15.487859 l
11.445365 16.239809 l
9.716865 16.239809 l
9.716865 15.487859 l
11.025465 15.487859 l
11.012447 14.348459 11.005934 13.476159 11.005934 12.870659 c
11.005934 11.679258 l
11.005934 9.465658 11.380283 7.984658 12.128934 7.235858 c
12.812524 6.428568 13.948534 6.024959 15.537134 6.024959 c
15.537116 6.025 l
h
13.828116 10.8398 m
13.857423 10.83979 l
13.828126 10.878854 l
13.828126 12.148354 l
12.783226 12.148354 l
12.783226 12.617104 l
13.828126 12.617104 l
13.815108 14.628803 13.808595 16.145704 13.808595 17.167904 c
13.808595 17.665955 l
16.142595 17.665955 l
16.142595 16.894474 l
17.216795 16.894474 l
17.216795 16.865177 l
17.216795 15.914657 17.210281 14.589777 17.197264 12.890577 c
17.197264 12.818966 17.203777 12.639937 17.216795 12.353478 c
17.216795 10.517577 17.109375 9.387978 16.894526 8.964777 c
16.673166 8.561137 16.266266 8.359307 15.673825 8.359307 c
15.332026 8.359307 l
14.622386 8.359307 14.182925 8.671807 14.013625 9.296807 c
13.9355 9.602798 13.873655 10.117117 13.828075 10.839808 c
13.828116 10.8398 l
h
20.029316 12.1484 m
21.709017 12.1484 l
21.709017 12.61715 l
20.029316 12.61715 l
20.029316 12.1484 l
h
21.074219 6.016 m
23.76952 6.016 l
23.76952 13.4086 l
22.500019 13.4086 l
22.500019 13.79923 l
23.76952 13.79923 l
23.76952 15.185929 l
23.76952 16.448929 23.994129 17.184629 24.44335 17.392929 c
24.671209 17.53616 24.954411 17.607769 25.292959 17.607769 c
26.123039 17.607769 l
26.123039 15.156569 l
26.855459 15.156569 l
26.855459 6.015968 l
29.53126 6.015968 l
29.53126 14.609768 l
28.564459 14.609768 l
28.564459 15.234768 l
29.53126 15.234768 l
29.518242 15.436598 29.511728 15.589588 29.511728 15.693758 c
29.511728 18.437859 l
28.105429 18.437859 l
28.105429 20.000359 l
21.855429 20.000359 l
21.855429 18.066759 l
21.279259 18.066759 l
21.279259 12.28546 l
21.074179 12.28546 l
21.074179 6.01596 l
21.074219 6.016 l
h
23.769518 13.4082 m
25.292917 13.4082 l
25.292917 13.79883 l
23.769518 13.79883 l
23.769518 13.4082 l
h
30.478516 6.045 m
33.330116 6.045 l
33.369179 6.045 33.675167 6.79044 34.248085 8.2813 c
34.293659 8.339893 34.892616 9.811299 36.044987 12.6954 c
36.777409 12.6954 l
36.777409 6.045 l
39.267609 6.045 l
39.267609 13.9649 l
39.550808 13.9649 l
39.550808 17.0508 l
38.544907 17.0508 l
38.544907 17.6465 l
39.550808 17.6465 l
39.550808 19.482399 l
35.810608 19.482399 l
35.810608 17.148399 l
35.146549 17.148399 l
34.248108 14.960899 33.642651 13.4505 33.330151 12.6171 c
33.330151 10.263599 l
32.978592 10.263599 l
32.978592 17.431599 l
32.412182 17.431599 l
32.412182 19.902298 l
30.078182 19.902298 l
30.078182 14.579998 l
30.498102 14.579998 l
30.498102 14.550701 l
30.485085 9.954301 30.478571 7.119101 30.478571 6.044801 c
30.478516 6.045 l
h
34.677727 12.6953 m
34.677727 13.21288 l
36.230427 13.21288 l
36.106728 12.86783 36.028595 12.6953 35.996048 12.6953 c
34.677647 12.6953 l
34.677727 12.6953 l
h
36.796925 12.6953 m
36.796925 13.21288 l
36.250046 13.21288 l
36.582077 14.03971 36.780647 14.58008 36.845745 14.833981 c
36.865276 14.833981 l
36.865276 14.765621 l
36.819702 13.919261 36.796917 13.401621 36.796917 13.212921 c
37.929718 13.212921 l
37.929718 12.695341 l
36.796917 12.695341 l
36.796925 12.6953 l
h
35.810524 19.73633 m
40.332024 19.73633 l
40.332024 20 l
35.810524 20 l
35.810524 19.73633 l
h
45.72261 6.035 m
45.751926 6.035009 l
47.835228 6.035009 49.108128 6.715349 49.570328 8.07601 c
49.785168 8.57731 49.892597 9.28691 49.892597 10.20491 c
47.626999 10.50764 l
47.597702 10.458812 l
47.597702 10.409984 l
47.597702 9.309684 47.226612 8.655384 46.484402 8.447084 c
46.263042 8.381976 45.986351 8.342914 45.65432 8.329893 c
44.853539 8.329893 44.335918 8.762833 44.10162 9.628693 c
43.964901 10.201613 43.896542 10.878693 43.896542 11.659992 c
43.896542 12.753792 l
43.896542 14.023292 43.912819 14.980392 43.94537 15.624891 c
44.521538 15.624891 l
44.521538 17.568291 l
47.294937 17.568291 l
47.294937 14.238191 l
45.537136 14.238191 l
45.537136 12.451091 l
50.820335 12.451091 l
50.820335 12.841721 l
50.126976 12.841721 l
50.126976 14.902221 l
48.710976 14.902221 l
48.710976 15.556521 l
49.404335 15.556521 l
49.404335 19.51162 l
41.855534 19.51162 l
41.855534 17.40222 l
40.996155 17.40222 l
40.996155 17.216669 l
41.367245 17.216669 l
41.367245 17.011589 l
41.855526 17.011589 l
41.855526 16.22057 l
40.537125 16.22057 l
40.537125 14.53107 l
41.162125 14.53107 l
41.149105 14.03628 41.142593 13.75307 41.142593 13.681459 c
41.142593 10.725659 41.302094 8.941859 41.621113 8.329859 c
41.718769 7.939229 41.988953 7.512799 42.431664 7.050559 c
43.089214 6.373479 44.186264 6.034959 45.722664 6.034959 c
45.72261 6.035 l
h
43.798809 19.72657 m
46.66991 19.72657 l
46.66991 20.00001 l
43.798809 20.00001 l
43.798809 19.72657 l
h
56.416019 6.006 m
59.277321 6.006 l
59.316383 6.006 59.622372 6.7547 60.19529 8.2521 c
60.247368 8.30418 60.846329 9.7788 61.992191 12.6759 c
62.724613 12.6759 l
62.724613 6.006 l
65.234413 6.006 l
65.234413 13.945499 l
65.517616 13.945499 l
65.517616 17.041199 l
64.502014 17.041199 l
64.502014 17.636898 l
65.517616 17.636898 l
65.517616 19.482597 l
61.757816 19.482597 l
61.757816 17.138798 l
61.093758 17.138798 l
60.195316 14.944798 59.589859 13.431098 59.277359 12.597797 c
59.277359 10.234497 l
58.9258 10.234497 l
58.9258 17.421997 l
58.35939 17.421997 l
58.35939 19.902496 l
56.015591 19.902496 l
56.015591 14.560696 l
56.445282 14.560696 l
56.445282 14.541164 l
56.425751 9.931765 56.415985 7.086764 56.415985 6.005964 c
56.416019 6.006 l
h
65.35154 10.3516 m
65.615196 10.3516 l
65.738899 10.3516 65.800743 10.416707 65.800743 10.546909 c
65.800743 10.592485 65.777962 10.615269 65.732384 10.615269 c
65.777962 10.673863 65.800743 10.745479 65.800743 10.830109 c
65.800743 10.878937 l
65.683556 10.878937 l
65.67054 10.748727 65.647751 10.683627 65.615204 10.683627 c
65.498016 10.683627 l
65.498016 10.878937 l
65.35154 10.878937 l
65.35154 10.351597 l
65.35154 10.3516 l
h
65.498039 10.4687 m
65.498039 10.595651 l
65.615227 10.595651 l
65.647774 10.595651 65.664055 10.579371 65.664055 10.546823 c
65.664055 10.468698 l
65.498032 10.468698 l
65.498039 10.4687 l
h
65.35154 11.0645 m
65.751923 11.0645 l
65.751923 11.18169 l
65.615204 11.18169 l
65.615204 11.58208 l
65.468727 11.58208 l
65.468727 11.18169 l
65.35154 11.18169 l
65.318993 11.18169 65.302711 11.165411 65.302711 11.132862 c
65.302711 11.113331 l
65.309227 11.080782 65.325508 11.064503 65.351547 11.064503 c
65.35154 11.0645 l
h
65.302742 11.7773 m
65.400398 11.7773 l
65.439461 11.7773 65.478523 11.87821 65.517586 12.08003 c
65.566414 12.08003 l
65.634773 11.7773 l
65.78125 11.7773 l
65.615227 12.29488 l
65.498039 12.29488 l
65.458977 12.29488 65.393867 12.12235 65.302727 11.7773 c
65.302742 11.7773 l
h
65.332039 12.4805 m
65.46875 12.48051 l
65.475266 12.539104 65.507813 12.58793 65.566406 12.626989 c
65.618484 12.529333 65.657547 12.48051 65.683594 12.48051 c
65.78125 12.48051 l
65.78125 12.509807 l
65.683594 12.653037 65.634773 12.737677 65.634773 12.763726 c
65.66082 12.77024 65.716164 12.848365 65.800804 12.998106 c
65.634781 12.998106 l
65.634781 12.95253 65.605484 12.906954 65.54689 12.861376 c
65.488297 12.952519 65.445984 12.998096 65.419937 12.998096 c
65.30275 12.998096 l
65.413422 12.835336 65.468773 12.750695 65.468773 12.744176 c
65.377632 12.594436 65.332054 12.506546 65.332054 12.480506 c
65.332039 12.4805 l
h
60.625042 12.6758 m
60.625042 13.19338 l
62.187542 13.19338 l
62.063843 12.848331 61.98571 12.6758 61.953163 12.6758 c
60.625065 12.6758 l
60.625042 12.6758 l
h
62.753941 12.6758 m
62.753941 13.193371 l
62.207062 13.193371 l
62.539093 14.026701 62.737663 14.570371 62.802761 14.82427 c
62.822292 14.82427 l
62.822292 14.755911 l
62.776718 13.90305 62.753933 13.382211 62.753933 13.193411 c
63.886734 13.193411 l
63.886734 12.675831 l
62.753933 12.675831 l
62.753941 12.6758 l
h
65.35154 13.1934 m
65.585922 13.1934 l
65.74868 13.212932 65.830063 13.291057 65.830063 13.42778 c
65.830063 13.447311 l
65.830063 13.623092 65.758453 13.710981 65.615219 13.710981 c
65.351547 13.710981 l
65.351547 13.193401 l
65.35154 13.1934 l
h
65.498039 13.3105 m
65.498039 13.61323 l
65.621742 13.61323 65.683586 13.567654 65.683586 13.47651 c
65.683586 13.447213 l
65.683586 13.369088 65.660805 13.323513 65.615227 13.310494 c
65.498039 13.310494 l
65.498039 13.3105 l
h
61.240242 17.2852 m
61.591793 17.285181 l
61.591793 17.40237 l
61.337883 17.40237 l
61.337883 17.490261 l
61.542961 17.490261 l
61.575512 17.496775 61.591789 17.513054 61.591789 17.539099 c
61.591789 17.568396 l
61.591789 17.600945 61.575512 17.617224 61.542961 17.617224 c
61.337883 17.617224 l
61.337883 17.705114 l
61.572262 17.705114 l
61.604813 17.711628 61.62109 17.727907 61.62109 17.753952 c
61.62109 17.773483 l
61.62109 17.806032 61.604813 17.822311 61.572262 17.822311 c
61.240231 17.822311 l
61.20768 17.822311 61.191402 17.806032 61.191402 17.773483 c
61.191402 17.324263 l
61.197918 17.298218 61.214195 17.2852 61.240242 17.2852 c
h
58.398441 17.539101 m
58.544922 17.539101 l
58.610027 17.734411 58.642578 17.845091 58.642578 17.87113 c
58.662109 17.87113 l
58.701172 17.649771 58.740234 17.539101 58.779301 17.539101 c
58.876957 17.539101 l
58.876957 17.568398 l
58.779301 17.900427 58.717457 18.066448 58.691406 18.066448 c
58.564457 18.066448 l
58.564457 18.020872 58.509113 17.845089 58.398438 17.539108 c
58.398441 17.539101 l
h
61.425739 17.9883 m
61.474556 17.988291 l
61.507107 17.994804 61.523384 18.011084 61.523384 18.037128 c
61.523384 18.349628 l
61.523384 18.434267 61.484322 18.496109 61.406193 18.535179 c
61.337833 18.535179 l
61.227165 18.535179 61.171814 18.479837 61.171814 18.36916 c
61.171814 18.320332 l
61.289005 18.320332 l
61.289005 18.385439 61.305283 18.417988 61.337833 18.417988 c
61.376896 18.417988 l
61.376896 18.037128 l
61.383411 18.00458 61.399689 17.9883 61.425735 17.9883 c
61.425739 17.9883 l
h
61.240242 18.7012 m
61.289063 18.7012 l
61.321613 18.7012 61.337891 18.763046 61.337891 18.886751 c
61.542969 18.7012 l
61.669918 18.7012 l
61.669918 18.720732 l
61.474609 18.935572 l
61.494141 18.935572 61.565754 19.029976 61.689449 19.218771 c
61.640621 19.248068 l
61.572262 19.248068 l
61.552731 19.248068 61.487621 19.176456 61.376953 19.033228 c
61.350906 19.033228 61.328125 19.104839 61.308594 19.248068 c
61.240234 19.248068 l
61.207684 19.248068 61.191406 19.231789 61.191406 19.19924 c
61.191406 18.750019 l
61.197922 18.71747 61.214199 18.701191 61.240246 18.701191 c
61.240242 18.7012 l
h
61.757839 19.7363 m
66.298836 19.7363 l
66.298836 19.999969 l
61.757835 19.999969 l
61.757835 19.7363 l
61.757839 19.7363 l
h
67.275391 6.016 m
74.29689 6.016 l
74.29689 8.3402 l
70.058594 8.3402 l
70.058594 11.660501 l
73.710892 11.660501 l
73.75972 11.689797 l
73.730423 11.738625 l
73.717407 12.207375 73.710892 12.480816 73.710892 12.558935 c
73.310501 12.558935 l
73.310501 12.578466 l
73.310501 12.747736 73.29422 13.109066 73.261673 13.662466 c
73.632767 13.662466 l
73.632767 13.929386 73.609985 14.062856 73.564407 14.062856 c
70.99601 14.062856 l
70.99601 14.541376 l
69.658112 14.541376 l
69.658112 14.795286 l
70.058502 14.795286 l
70.058502 16.015986 l
71.3964 16.015986 l
71.3964 16.230825 l
70.058502 16.230825 l
70.058502 19.619526 l
70.038971 19.785545 l
68.593674 19.785545 l
68.593674 20.000385 l
67.324173 20.000385 l
67.291626 20.000385 67.275345 19.984106 67.275345 19.951557 c
67.275345 19.599997 l
67.304642 19.365616 l
67.988235 19.365616 l
67.988235 19.014055 l
67.275345 19.014055 l
67.275345 17.666355 l
67.607376 17.666355 l
67.607376 12.724955 l
68.173782 12.724955 l
68.173782 12.373395 l
67.275345 12.373395 l
67.275345 6.015995 l
67.275391 6.016 l
h
67.041023 15.293 m
67.138672 15.293 l
67.171219 15.293 67.1875 15.309279 67.1875 15.341828 c
67.1875 15.664099 l
67.194016 15.761755 67.216797 15.810578 67.255859 15.810578 c
67.353516 15.810578 l
67.373047 15.810578 67.395828 15.787795 67.421875 15.742219 c
67.421875 15.341829 l
67.428391 15.30928 67.444672 15.293001 67.470711 15.293001 c
67.558601 15.293001 l
67.558601 15.742221 l
67.558601 15.878941 67.464195 15.947301 67.275398 15.947301 c
67.119148 15.92777 67.041016 15.85941 67.041016 15.742221 c
67.041016 15.293001 l
67.041023 15.293 l
h
70.107399 15.5273 m
70.12693 15.5273 l
70.374321 15.63797 70.517563 15.69332 70.556618 15.69332 c
70.556618 15.83004 l
70.12693 15.97652 l
70.107399 15.97652 l
70.107399 15.898395 l
70.107399 15.878863 70.201805 15.833287 70.390602 15.761675 c
70.390602 15.742144 l
70.358055 15.742144 70.263649 15.709595 70.107399 15.644487 c
70.107399 15.527297 l
70.107399 15.5273 l
h
68.759804 16.0156 m
68.759804 16.23044 l
70.039101 16.23044 l
70.039101 16.0156 l
68.759804 16.0156 l
h
67.23632 16.1133 m
67.255867 16.11331 l
67.42514 16.11331 67.509773 16.184921 67.509773 16.32815 c
67.353523 16.32815 l
67.353523 16.263042 67.314461 16.230493 67.236336 16.230493 c
67.210289 16.230493 67.184242 16.253277 67.158203 16.298853 c
67.392586 16.389996 67.509766 16.455103 67.509766 16.494164 c
67.509766 16.507181 67.519531 16.529964 67.539063 16.562513 c
67.539063 16.679703 67.444656 16.751314 67.255859 16.777353 c
67.080078 16.751308 66.992188 16.669933 66.992188 16.533213 c
67.158211 16.533213 l
67.158211 16.59832 67.174492 16.630869 67.207039 16.630869 c
67.324226 16.630869 l
67.356773 16.630869 67.373055 16.61459 67.373055 16.582041 c
67.373055 16.533213 l
67.138672 16.474619 67.021492 16.412773 67.021492 16.347662 c
67.021492 16.259771 l
67.07357 16.162115 67.14518 16.113291 67.23632 16.113291 c
67.23632 16.1133 l
h
66.992203 16.933599 m
67.070351 16.93359 l
67.161491 16.93359 67.223343 16.998697 67.25589 17.128901 c
67.421913 16.93359 l
67.539101 16.93359 l
67.539101 16.982418 l
67.428429 17.132158 67.373077 17.236328 67.373077 17.294918 c
67.392609 17.294918 67.454453 17.379557 67.558624 17.548828 c
67.558624 17.578125 l
67.421906 17.578125 l
67.40889 17.578125 67.353546 17.513018 67.255882 17.382814 c
67.197289 17.500004 67.14846 17.565104 67.109406 17.578125 c
66.972687 17.578125 l
67.083359 17.382814 67.154976 17.278645 67.187515 17.265625 c
67.057304 17.076824 66.992203 16.966154 66.992203 16.933605 c
66.992203 16.933599 l
h
74.560547 6.006 m
82.763649 6.006 l
82.763649 8.34 l
80.048851 8.34 l
80.048851 18.0177 l
81.27935 18.0177 l
81.27935 18.3009 l
80.048851 18.3009 l
80.048851 19.3654 l
79.316429 19.3654 l
79.316429 19.73649 l
79.834007 19.73649 l
79.834007 20.00016 l
77.343811 20.00016 l
77.311264 20.00016 77.294983 19.983881 77.294983 19.951332 c
77.294983 8.340332 l
74.560585 8.340332 l
74.560585 6.006332 l
74.560547 6.006 l
h
79.082001 18.017599 m
79.082001 18.300798 l
80.029274 18.300798 l
80.029274 18.017599 l
79.082001 18.017599 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
